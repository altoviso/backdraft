- name: bdReflect
  owner: bd-core.post-processing-functions
  type: ppf
  sum: reflect a watchable into a property of `ppfTarget`
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms. Arguments

    bdReflect takes a hash from property, termed the `<i>targetProperty</i>`, in `ppfTarget` to the arguments `(watchable, prop, formatter)`. `watchable`, optional, is either a .../mixins.watchHub a .../types.Watchable; if missing, `watchable` defaults to `ppfOwner`. `prop` is a string or symbol to watch in `watchable`. `formatter`, optional, is a formatter function to apply to `watchable[prop]` before reflecting into `ppfTarget[targetProperty]`, if missing, `formatter` defaults to `x => x`.

    To reflect means `ppfTarget[targetProperty]` is initialized with `formatter(watchable[prop])` when `ppfTarget` is created and further the property is updated to reflect the current formatted value of `formatter(watchable[prop])` any time that value mutates. For example, consider the following component:

  - c: |
      class MyComponent extends Component.withWatchables("myProp") {
          bdElements(){
              e("div", {bdReflect: {innerHTML: [this, "myProp", v => v ? v : "?"]});
          }
      }
  - >
    The `innerHTML` of the `DIV` node will be initialized to `this.myProp ? this.myProp : "?"` and any time that the value `this.myProp ? this.myProp : "?"` mutates, `innerHTML` will be updated accordingly.

    The arguments for an particular `targetProperty` are given as an array; if both `watchable` and `formatter` are missing, then arguments may be given as a single scalar `prop` value. For example:

  - c: |
      {bdRefect: {innerHTML: [this, "myProp", v => v ? v : "?"]}}
      // arguments: (this, "myProp", v => v ? v : "?")

      {bdRefect: {innerHTML: ["myProp"]}}
      // arguments: (ppfOwner, "myProp", x => x)

      {bdRefect: {innerHTML: "myProp"}}
      // arguments: (ppfOwner, "myProp", x => x)

  - >
    When reflecting a property in the `ppfOwner`, the watchable argument may be omitted. The following is equivalent to the original example:

  - c: |
      bdElements(){
          e("div", {bdReflect: {innerHTML: ["myProp", v => v ? v : "?"]);
      }

  - >
    As described in .../post-processing-functions, when `ppfArgs` is a hash, as in the case of `bdReflect`, the underscore optimization may be employed. The following is equivalent to the original example:

  - c: |
      bdElements(){
          e("div", {bdReflect_innerHTML: ["myProp", v => v ? v : "?"]);
      }
  - >
    `bdReflect` includes an extra expressive optimization by assuming `innerHTML` if the target property is missing. This allows `bdReflect` to accept `ppfArgs` that gives an argument list rather than a hash. The following is equivalent to the original example:

  - c: |
      bdElements(){
          e("div", {bdReflect: ["myProp", v => v ? v : "?"]);
      }
  - >
    As noted in `bdReflect`'s signature, the formatter is always optional. So the common case of reflecting a property value in a component into the `innerHTML` without formatting can be stated quite tersely as follows:

  - c: |
      bdElements(){
          e("div", {bdReflect: "myProp");
      }

- name: bdAdvise
  owner: bd-core.post-processing-functions
  type: ppf
  sum: connect an event handler to an event on `ppfTarget`
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms.

    `bdAdvise` takes a hash from event type, `eventType`, to handler function, `handler`. If `ppfTarget` is a .../classes.Component, then `ppfTarget.advise` is applied to `(eventType, handler)` (see .../mixins.eventHub.advise); otherwise `handler` is connected by applying .../functions.connect to `(ppfTarget, eventType, handler)` and the handle returned is applied to `ppfOwner.ownWhileRendered` (see .../classes.Component.ownWhileRendered). For example:

  - c: |
      class MyClass extends Component {
          bdElements(){
              return e("div",
                  e("div", {bdAdvise: {click: this.onClick.bind(this)}}),
                  e(SomeComponent, {bdAdvise: {someEvent: this.onSomeEvent.bind(this)}})
              };
          }
      }

  - >
    The `bdAdvise` for the freshly-created `DIV` node, `node`, causes the following connection:
  - c: |
      ppfOwner.ownWhileRendered(connect(node, "click", this.onClick.bind(this)))
  - >
    And the `bdAdvise` for freshly-instantiated `SomeComponent`, `instance`, causes the following connection:
  - c: |
      instance.advise("someEvent" this.onClick.bind(this)))
  - >
    If a `string` or `symbol` is given for the handler, then `ppfOwner[handler]` is assumed. For example:
  - c: |
      e("div", {bdAdvise: {click: "onClick"}})
  - >
    is equivalent to
  - c: |
      e("div", {bdAdvise: {click: this.onClick.bind(this)}})
  - >
    As described in .../post-processing-functions, when `ppfArgs` is a hash, as in the case of `bdAdvise`, the underscore optimization may be employed. The following is equivalent to `DIV` connection in the original example:

  - c: |
      e("div", {bdAdvise_click: "onClick"})
  - >
- name: bdAttach
  owner: bd-core.post-processing-functions
  type: ppf
  sum: attach a reference to `ppfTarget`
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms.

    When `ppfArgs` is a `string` or `symbol`, `prop`, `bdAttach` causes the following processing:
  - c: |
      ppfOwner[prop] = ppfTarget;
      ppfOwner.ownWhileRendered({
      	destroy: function(){
      		delete ppfOwner[prop];
      	}
      });
  - >
    When `ppfArgs` is a `x => void`, `func`, `bdAttach` causes the following processing:
  - c: |
      func(ppfTarget);
- name: bdWatch
  owner: bd-core.post-processing-functions
  type: ppf
  sum: connect a watcher to a watchable property in `ppfTarget`
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms.

    bdWatch takes a hash from property, `watchProp`, to watcher function, `watcher`. `ppfTarget` must be a .../classes.Component and `bdWatch` connects the watcher to the `watchProp` by applying `ppfTarget.watch` to `(watchProp, watcher)` (see .../mixins.watchHub.watch).

    bdWatch defines an optimization that allows `watcher` to be a `string` or `symbol` in which case the actual watcher is computed as `ppfOwner[watcher]`.

- name: bdTitleNode
  owner: bd-core.post-processing-functions
  type: ppf
  sum: sets `bdDom.titleNode` to `ppfTarget`
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms.

    Sets `bdDom.titleNode` to `ppfTarget`. See .../classes.Component.title for details about how a title is reflected.

- name: bdChildrenAttachPoint
  owner: bd-core.post-processing-functions
  type: ppf
  sum: designates `ppfTarget` as the node to which children are attached
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms.

    Designates `ppfTarget` as the node to which children are attached.

- name: bdReflectClass
  owner: bd-core.post-processing-functions
  type: ppf
  sum: reflects one or more formatted watchables into `ppfOwner.className`
  d:
  - >
    This description uses some of the terms `ppfOwner`, `ppfTarget`, `ppfProcId`, `ppfProc`, and `ppfArgs`; see .../post-processing-functions for a definition of these terms.

    Reflects one or more formatted watchables into `ppfOwner.className`. `ppfArgs` is given as a list or arguments (an array). The list is transformed into a set of triples of `(watchable, prop, formatter)` and each triple causes `formatter(watchable[prop])` to be reflected into `ppfOwner.className`. Each triple is a completely separate reflection. For example:

  - c: |
      class MyClass extends Component.withWatchables("error", "value") {
          bdElements(){
              return e("div" {
                  bdReflectClass:[
                    this, "error", v => v ? "error" : "",
                    this, "value", v = v=="" ? "no-value" : ""
                  ],
                  // other ctorProps and ppFuncs
                },
                  // children, if any
              );
          }
      }

  - >
    The two CSS classes, namely "error" and "no-value", will be added/removed from `ppfOwner.className` depending upon the `error` and `value` property values of a particular `MyClass` instance when that instance is rendered.

    Since the `prop` argument is <i>always</i> required, it is possible to omit optional arguments. The following example gives a bdReflectClass ppfArgs with four triples:

  - c: |
      // the following ppfArgs has gives three triples with
      bdReflectClass:[
          this, "p1", v => v ? "p1" : "", // all three args
          "p2", "p2", v => v ? "p2" : "", // missing first arg; equivalent to (this, "p1", v => v ? "p1" : "")
          this, "p3",                     // missing last arg; equivalent to (this, "p1", x => x)
          "p4"]                           // missing first and last arg; equivalent to (this, "p1", x => x)

